---
// No props needed for initial state
import posts from '../data/posts.json';
---

<div class="filter-bar">
  <div class="filter-group">
    <label>Filter by:</label>
    <select id="filter" class="filter-select" data-default="all">
      <option value="all" selected>All Posts</option>
      <option value="featured">Featured</option>
    </select>
  </div>
  
  <div class="filter-group">
    <label>Sort by:</label>
    <select id="sort" class="filter-select" data-default="newest">
      <option value="newest" selected>Newest First</option>
      <option value="oldest">Oldest First</option>
      <option value="title-asc">Title A-Z</option>
      <option value="title-desc">Title Z-A</option>
    </select>
  </div>
</div>

<script>
  function initializeFilter() {
    const filterSelect = document.getElementById('filter');
    const sortSelect = document.getElementById('sort');
    const blogGrid = document.querySelector('.blog-grid');
    
    if (!blogGrid) return;
    
    // Store original posts order (already sorted newest first from server)
    const originalPosts = Array.from(blogGrid.children);
    let currentPosts = [...originalPosts];

    // Reset to default selections and apply initial filters
    filterSelect.value = filterSelect.dataset.default;
    sortSelect.value = sortSelect.dataset.default;
    
    function applyFilters() {
      const filterValue = filterSelect.value;
      const sortValue = sortSelect.value;

      // First apply filters
      let filteredPosts = originalPosts.filter(post => {
        if (filterValue === 'all') return true;
        if (filterValue === 'featured') return post.dataset.featured === 'true';
        return true;
      });

      // Then apply sorting
      filteredPosts.sort((a, b) => {
        const dateA = new Date(a.dataset.date).getTime();
        const dateB = new Date(b.dataset.date).getTime();
        const titleA = a.dataset.title.toLowerCase();
        const titleB = b.dataset.title.toLowerCase();

        switch (sortValue) {
          case 'newest':
            return dateB - dateA;
          case 'oldest':
            return dateA - dateB;
          case 'title-asc':
            return titleA.localeCompare(titleB);
          case 'title-desc':
            return titleB.localeCompare(titleA);
          default:
            return dateB - dateA;
        }
      });

      // Update the DOM with animation
      blogGrid.style.opacity = '0';
      setTimeout(() => {
        // Remove all posts
        while (blogGrid.firstChild) {
          blogGrid.removeChild(blogGrid.firstChild);
        }
        
        // Add filtered and sorted posts
        filteredPosts.forEach(post => {
          blogGrid.appendChild(post);
        });

        // Show the grid with animation
        requestAnimationFrame(() => {
          blogGrid.style.opacity = '1';
        });
      }, 300);
    }

    // Add event listeners
    filterSelect.addEventListener('change', applyFilters);
    sortSelect.addEventListener('change', applyFilters);

    // Apply initial filters
    applyFilters();
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeFilter);
</script>

<style>
  .filter-bar {
    background-color: #483AA0;
    border-radius: 1rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
    color: white;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
    justify-content: space-between;
  }

  .filter-group {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .filter-group label {
    font-size: 0.875rem;
    opacity: 0.8;
  }

  .filter-select {
    background: rgba(255,255,255,0.1);
    border: 1px solid rgba(255,255,255,0.2);
    color: white;
    padding: 0.5rem 2.5rem 0.5rem 1rem;
    border-radius: 0.5rem;
    cursor: pointer;
    font-size: 0.875rem;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.5rem center;
    background-size: 1em;
  }

  .filter-select option {
    background-color: #483AA0;
    color: white;
    padding: 0.5rem;
  }

  @media (max-width: 640px) {
    .filter-bar {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-group {
      justify-content: space-between;
    }
  }
</style>
