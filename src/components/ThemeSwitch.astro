---
---

<div class="theme-switch">
  <button class="theme-switch__option" data-theme="light" aria-label="Light theme" id="light-theme">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="5"/>
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </svg>
    <span>Light</span>
  </button>
  <button class="theme-switch__option" data-theme="system" aria-label="System theme" id="system-theme">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
      <line x1="8" y1="21" x2="16" y2="21"/>
      <line x1="12" y1="17" x2="12" y2="21"/>
    </svg>
    <span>System</span>
  </button>
  <button class="theme-switch__option" data-theme="dark" aria-label="Dark theme" id="dark-theme">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
    </svg>
    <span>Dark</span>
  </button>
  <div class="theme-switch__bg" id="theme-switch-bg"></div>
</div>

<style>
  .theme-switch {
    display: flex;
    align-items: center;
    background: var(--color-border);
    padding: 0.25rem;
    border-radius: 0.75rem;
    position: relative;
    gap: 0.25rem;
  }

  .theme-switch__option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    background: none;
    color: var(--color-text);
    cursor: pointer;
    position: relative;
    z-index: 1;
    transition: color 0.2s ease;
    border-radius: 0.5rem;
  }

  .theme-switch__option span {
    font-size: 0.875rem;
    font-weight: 500;
  }

  .theme-switch__option svg {
    width: 16px;
    height: 16px;
  }

  .theme-switch__option[data-active="true"] {
    color: var(--color-primary);
  }

  .theme-switch__bg {
    position: absolute;
    top: 0.25rem;
    left: 0.25rem;
    width: calc(33.33% - 0.125rem);
    height: calc(100% - 0.5rem);
    background: var(--color-background);
    border-radius: 0.5rem;
    transition: transform 0.2s ease;
  }

  .theme-switch__option[data-active="true"] ~ .theme-switch__bg {
    transform: translateX(0);
  }

  #system-theme[data-active="true"] ~ .theme-switch__bg {
    transform: translateX(100%);
  }

  #dark-theme[data-active="true"] ~ .theme-switch__bg {
    transform: translateX(200%);
  }

  @media (max-width: 640px) {
    .theme-switch__option span {
      display: none;
    }
    
    .theme-switch__option {
      padding: 0.5rem;
    }
  }
</style>

<script>
  function updateTheme(theme) {
    // Update the DOM
    document.documentElement.setAttribute('data-theme', theme);
    
    // Update active states
    document.querySelectorAll('.theme-switch__option').forEach(btn => {
      btn.setAttribute('data-active', btn.getAttribute('data-theme') === theme ? 'true' : 'false');
    });

    // Store the preference
    localStorage.setItem('theme', theme);
  }

  function initTheme() {
    const storedTheme = localStorage.getItem('theme') || 'system';
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    // Set initial active state
    document.querySelector(`#${storedTheme}-theme`).setAttribute('data-active', 'true');
    
    // Set initial theme
    if (storedTheme === 'system') {
      document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
    } else {
      document.documentElement.setAttribute('data-theme', storedTheme);
    }
  }

  // Initialize theme
  initTheme();

  // Add click handlers
  document.querySelectorAll('.theme-switch__option').forEach(button => {
    button.addEventListener('click', (e) => {
      const theme = e.currentTarget.getAttribute('data-theme');
      if (theme === 'system') {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
      } else {
        document.documentElement.setAttribute('data-theme', theme);
      }
      updateTheme(theme);
    });
  });

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (localStorage.getItem('theme') === 'system') {
      document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
    }
  });
</script>
